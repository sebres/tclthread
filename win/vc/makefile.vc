# RCS: @(#) $Id: makefile.vc,v 1.5 2000/08/10 01:35:59 davidg Exp $

!include "config.vc"

!if "$(NODEBUG)" == "0"
TMPDIRNAME = Debug
DBGX = d
!else
TMPDIRNAME = Release
DBGX =
!endif

SOURCEROOT	= ..\..
GENERICDIR	= $(SOURCEROOT)\generic
TESTDIR		= $(SOURCEROOT)\tests
WINDIR		= $(SOURCEROOT)\win\vc
TMPDIR		= $(WINDIR)\$(TMPDIRNAME)
OUTDIR		= $(WINDIR)\$(TMPDIRNAME)

THREADLIB  = $(OUTDIR)\thread$(DBGX).dll

THREADOBJS  = \
	$(TMPDIR)\threadCmd.obj \
	$(TMPDIR)\threadSpCmd.obj \
	$(TMPDIR)\threadSvCmd.obj \
	$(TMPDIR)\resource.obj


######################################################################
# Compile flags
######################################################################

!if "$(NODEBUG)" == "0"
cdebug = -Z7 -Od -WX
!else
cdebug = -O2 -Gs -GD
!endif

# use msvcrt.dll for the C-runtime
cvarsmt = -MD$(DBGX)

cflags = -c -W3 -nologo -YX $(cdebug) $(cvarsmt) $(include32) \
         -Fp$(TMPDIR)\ -Fo$(TMPDIR)\ -I"$(TCLROOT)\generic"

######################################################################
# Link flags
######################################################################

!if "$(NODEBUG)" == "0"
# we need to strip the reference to msvcrt from the Stubs static library
ldebug = -opt:noref -debug -debugtype:cv -nodefaultlib:msvcrt
!else
ldebug = -opt:ref -release
!endif

# declarations common to all linker options
lcommon = -nologo -incremental:no -machine:$(MACHINE) $(ldebug)

dlllflags = $(lcommon) -subsystem:windows -dll


######################################################################
# Project specific targets
######################################################################

all : $(THREADLIB)

test: all
    @$(TCLSH_PROG) <<
regsub -all {\\} {$(THREADLIB)} {/} threadlib
package ifneeded Thread 2.0 [list load $$threadlib]
regsub -all {\\} {$(TESTDIR)} {/} testdir
source [file join $$testdir all.tcl]
<<nokeep

$(THREADLIB) : $(TMPDIR) $(OUTDIR) $(THREADOBJS)
	@echo Linking...
	@$(link32) $(dlllflags) -out:$@ $(TCLSTUBSLIB) @<<
$(THREADOBJS)
<<nokeep

# Create the output and temp directories, if not already there.
# Won't error with a forced rebuild_all (ie. nmake -a ...).
#
$(TMPDIR) :
	@if not exist $(TMPDIR)\nul mkdir $(TMPDIR) &\
		echo Created directory '$(TMPDIR)'

!if "$(TMPDIR)" != "$(OUTDIR)"
$(OUTDIR) :
	@if not exist $(OUTDIR)\nul mkdir $(OUTDIR) &\
		echo Created directory '$(OUTDIR)'
!endif

######################################################################
# Batch mode inference rules
######################################################################

{$(GENERICDIR)}.c{$(TMPDIR)}.obj ::
	@echo Compiling...
	@$(cc32) $(cflags) -DUSE_TCL_STUBS -DTCL_THREADS=1 @<<
$<
<<nokeep


######################################################################
# Special case targets
######################################################################

$(TMPDIR)\thread.res : $(WINDIR)\thread.rc
	@echo Compiling resources...
	$(rc32) -fo"$@" -i "$(GENERICDIR)" -i "$(TCLROOT)\generic" -r \
	    -DNODEBUG=$(NODEBUG) -DRESOURCE_INCLUDED $(WINDIR)\thread.rc

$(TMPDIR)\resource.obj : $(TMPDIR)\thread.res
	@$(cvtres32) -nologo -machine:$(MACHINE) -out:$@ $(TMPDIR)\thread.res


######################################################################
# Dedependency rules
######################################################################

$(WINDIR)\thread.rc : $(GENERICDIR)\thread.h

$(GENERICDIR)\threadCmd.c : $(GENERICDIR)\thread.h


######################################################################
# Cleanup
######################################################################

clean:
	@if exist $(OUTDIR)\nul rmdir /s /q $(OUTDIR)
	@if exist $(TMPDIR)\nul rmdir /s /q $(TMPDIR)
