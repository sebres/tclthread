######################################################################
# makefile.vc --
#
# Microsoft Visual C++ descriptions file for their program
# maintenance utility -> nmake.exe
#
# RCS: @(#) $Id: makefile.vc,v 1.10 2000/08/20 08:41:53 davidg Exp $
######################################################################


######################################################################
# 2 bug fixes needed for VC++ 6.0's nmake tool.

# reset the version *string* back to the integer it's supposed to be.
# more entries will have to be made here for all subsiquent releases
# until it's fixed.
#
_NMAKE_VER  = $(_NMAKE_VER:6.00.8168.0=600)

!if $(_NMAKE_VER) >= 600
# non existent directories as targets are considered UP-TO-DATE!
#
HAVE_BAD_NODIR_TS   = 1
!endif
######################################################################

!include "config.vc"

######################################################################
# Commandline checks and over-rides
######################################################################

# Set NODEBUG to 0 to compile with symbols.
#
!ifndef NODEBUG
NODEBUG		= 1
!endif

# Set STATIC_BUILD to 1 to make a static library rather
# than a Dll.
#
!ifndef STATIC_BUILD
STATIC_BUILD	= 0
!endif

# Set USE_TCL_STUBS to 0 to disable Stubs support.  Stubs
# will work fine even with static libraries, but you may
# disable it if you want to.
#
!ifndef USE_TCL_STUBS
USE_TCL_STUBS	= 1
!endif

# Set NOMSVCRT to 1 to use libcmt(d).lib instead of the
# dynamic run-time.
#
!ifndef NOMSVCRT
!if $(STATIC_BUILD)
NOMSVCRT	= 1
!else
NOMSVCRT	= 0
!endif
!endif

!if $(STATIC_BUILD) == 0 && $(NOMSVCRT) == 1
!error "The static runtime in a loadable (dll) extension is a useless configuration that will cause abnormal and unnecessary code bloat."
!endif

######################################################################
# Macro setups
######################################################################

# remember to change thread.h as well when this changes
#
VER	= 20

!if $(NODEBUG)
TMPDIRNAME = Release
DBGX =
!else
TMPDIRNAME = Debug
DBGX = d
!endif

!if $(STATIC_BUILD)
!if $(NOMSVCRT) == 0
TMPDIRNAME = $(TMPDIRNAME)_StaticX
STCX	= x
!else
TMPDIRNAME = $(TMPDIRNAME)_Static
STCX	= s
!endif
OUTEXT	= lib
!else
STCX	=
OUTEXT	= dll
!endif

SOURCEROOT	= ..\..
GENERICDIR	= $(SOURCEROOT)\generic
TESTDIR		= $(SOURCEROOT)\tests
WINDIR		= $(SOURCEROOT)\win\vc
TMPDIR		= $(WINDIR)\$(TMPDIRNAME)

!ifndef OUTDIR
OUTDIR		= $(WINDIR)\$(TMPDIRNAME)
!endif

THREADLIB	= $(OUTDIR)\thread$(VER)$(STCX)$(DBGX).$(OUTEXT)
THREADLIBBASE	= $(OUTDIR)\thread$(VER)$(STCX)$(DBGX)

THREADOBJS	= \
	$(TMPDIR)\threadCmd.obj \
	$(TMPDIR)\threadSpCmd.obj \
	$(TMPDIR)\threadSvCmd.obj \
!if $(STATIC_BUILD) == 0
	$(TMPDIR)\resource.obj
!endif

######################################################################
# Compile flags
######################################################################

!if $(NODEBUG)
cdebug = -O2 -Gs -GD
!else
cdebug = -Z7 -Od -WX
!endif

!if $(NOMSVCRT)
crt	= -MT$(DBGX)
!else
crt	= -MD$(DBGX)
!endif

!if $(USE_TCL_STUBS)
ctclstubs   = -DUSE_TCL_STUBS
!else
ctclstubs   =
!endif

cflags = -nologo -c -W3 -YX $(cdebug) $(crt) -Fp$(TMPDIR)\ \
          -Fo$(TMPDIR)\ -I"$(TCLROOT)\generic"

######################################################################
# Link flags
######################################################################

!if $(NODEBUG)
ldebug = -opt:ref -release
!else
ldebug = -opt:noref -debug -debugtype:cv
!endif

# declarations common to all linker options
#
lcommon = -nologo -incremental:no -machine:$(MACHINE) $(ldebug)

!if $(NOMSVCRT)
lrt	= libcmt$(DBGX).lib
!else
lrt	= msvcrt$(DBGX).lib
!endif

lflags = $(lcommon) -machine:$(MACHINE) -subsystem:windows -dll -link50compat $(lrt)

!if $(USE_TCL_STUBS)
# A reference to msvcrt.lib happens to be embedded into the
# Stubs library.  This is a bug with no current solution.
# We need to strip this reference at link-time.
#
ltclstubs	    = -nodefaultlib:msvcrt.lib $(TCLSTUBSLIB)
!else
ltclstubs	    =
!endif

######################################################################
# Project specific targets
######################################################################

all: setup $(THREADLIB)

setup:
	@$(vcvars) > nul
	@if not exist $(TMPDIR)\nul mkdir $(TMPDIR) &\
		echo Created directory '$(TMPDIR)'
	@if not exist $(OUTDIR)\nul mkdir $(OUTDIR) &\
		echo Created directory '$(OUTDIR)'

test: all
    $(TCLSH_PROG) <<
regsub -all {\\} {$(THREADLIB)} {/} threadlib
package ifneeded Thread 2.0 [list load $$threadlib]
regsub -all {\\} {$(TESTDIR)} {/} testdir
source [file join $$testdir all.tcl]
<<nokeep



!if $(STATIC_BUILD)
$(THREADLIB) : $(THREADOBJS)
	@echo Creating Static Library...
	$(lib32) -nologo -machine:$(MACHINE) -out:$@ @<<
!else
$(THREADLIB) : $(THREADOBJS) $(TCLSTUBSLIB)
	@echo Linking...
	$(link32) $(lflags) -out:$@ $(ltclstubs) @<<
!endif
$(THREADOBJS)
<<nokeep
!if $(STATIC_BUILD) == 0
	-del $(THREADLIBBASE).exp $(THREADLIBBASE).lib
!endif

######################################################################
# Inference rules.  Use batch-mode when supported.
######################################################################

!if $(_NMAKE_VER) < 162
{$(GENERICDIR)}.c{$(TMPDIR)}.obj :
!else
{$(GENERICDIR)}.c{$(TMPDIR)}.obj ::
	@echo Compiling...
!endif
	$(cc32) $(cflags) $(ctclstubs) -DTCL_THREADS=1 @<<
$<
<<nokeep


######################################################################
# Special case targets
######################################################################

$(TMPDIR)\thread.res : $(WINDIR)\thread.rc
	@echo Compiling resources...
	$(rc32) -fo"$@" -i "$(GENERICDIR)" -i "$(TCLROOT)\generic" -r \
		-DNODEBUG=$(NODEBUG) -DRESOURCE_INCLUDED $(WINDIR)\thread.rc

$(TMPDIR)\resource.obj : $(TMPDIR)\thread.res
	$(cvtres32) -nologo -machine:$(MACHINE) -out:$@ $(TMPDIR)\thread.res

$(TCLSTUBSLIB) :
	@echo Build Tcl first!  Is the path to tclstubXX.lib set correctly?

######################################################################
# Dedependency rules
######################################################################

$(WINDIR)\thread.rc : $(GENERICDIR)\thread.h
$(GENERICDIR)\threadCmd.c : $(GENERICDIR)\thread.h
$(GENERICDIR)\threadSpCmd.c : $(GENERICDIR)\thread.h
$(GENERICDIR)\threadSpCmd.c : $(GENERICDIR)\thread.h

######################################################################
# Cleanup
######################################################################

clean:
	@echo Cleaning non-output build files...
	@if exist $(TMPDIR)\nul rmdir /s /q $(TMPDIR)

hose: clean
	@echo Deleting output file $(THREADLIB) ...
	@del $(THREADLIB)


.SUFFIXES:
.SUFFIXES: .c
