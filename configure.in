#!/bin/bash -norc
dnl	This file is an input file used by the GNU "autoconf" program to
dnl	generate the file "configure", which is run during Tcl installation
dnl	to configure the system for the local environment.
#
# RCS: @(#) $Id: configure.in,v 1.10 2002/03/28 02:38:51 hobbs Exp $

#--------------------------------------------------------------------
# This configure.in is based on the Tcl Extension Architecture (TEA)
# v2002 spec.  See the sampleextension module for a fully commented
# version of the configure.in and makefiles to build your own extension.
#    http://tcl.sourceforge.net/  'sampleextension' cvs module
#    http://www.tcl.tk/           Tcl Developer Exchange
#--------------------------------------------------------------------

AC_INIT(generic/threadCmd.c)

#--------------------------------------------------------------------
# Make sure we find tcl.m4 et. al. in the tclconfig subdirectory
#--------------------------------------------------------------------
AC_CONFIG_AUX_DIR(tclconfig)
CONFIGDIR=${srcdir}/tclconfig
AC_SUBST(CONFIGDIR)

PACKAGE=thread

THREAD_MAJOR=2
THREAD_MINOR=4
THREAD_PATCHLEVEL=

THREAD_VERSION_SUBSET83="${THREAD_MAJOR}.1.${THREAD_MINOR}"

VERSION=${THREAD_MAJOR}.${THREAD_MINOR}${THREAD_PATCHLEVEL}
NODOT_VERSION=${THREAD_MAJOR}${THREAD_MINOR}

AC_SUBST(PACKAGE)
AC_SUBST(VERSION)
AC_SUBST(THREAD_VERSION_SUBSET83)
# This package name must be replaced statically for AC_SUBST to work
AC_SUBST(thread_LIB_FILE)

#--------------------------------------------------------------------
# We put this here so that you can compile with -DVERSION="1.2" to
# encode the package version directly into the source files.
#--------------------------------------------------------------------

eval AC_DEFINE_UNQUOTED(VERSION, "${VERSION}")
eval AC_DEFINE_UNQUOTED(THREAD_VERSION, "${VERSION}")
eval AC_DEFINE_UNQUOTED(THREAD_VERSION_SUBSET83, "${THREAD_VERSION_SUBSET83}")

#------------------------------------------------------------------------
# Handle the --prefix=... option
#------------------------------------------------------------------------

if test "${prefix}" = "NONE"; then
    prefix=/usr/local
fi
if test "${exec_prefix}" = "NONE"; then
    exec_prefix=$prefix
fi

#------------------------------------------------------------------------
# Standard compiler checks.
# This uses the CC env var, or looks for gcc otherwise.
#------------------------------------------------------------------------

# If the user did not set CFLAGS, set it now to keep
# the AC_PROG_CC macro from adding "-g -O2".
if test "${CFLAGS+set}" != "set" ; then
    CFLAGS=""
fi

AC_PROG_CC

#------------------------------------------------------------------------
# If we're using GCC, see if the compiler understands -pipe.  If so, use it.
# It makes compiling go faster.  (This is only a performance feature.)
#------------------------------------------------------------------------

if test -z "$no_pipe" -a -n "$GCC"; then
    AC_MSG_CHECKING([if the compiler understands -pipe])
    OLDCC="$CC"
    CC="$CC -pipe"
    AC_TRY_COMPILE(,, AC_MSG_RESULT([yes]), CC="$OLDCC"
	AC_MSG_RESULT([no]))
fi

AC_PROG_INSTALL

#--------------------------------------------------------------------
# Checks to see if the make program sets the $MAKE variable.
#--------------------------------------------------------------------

AC_PROG_MAKE_SET

#--------------------------------------------------------------------
# Find ranlib
#--------------------------------------------------------------------

AC_PROG_RANLIB

#--------------------------------------------------------------------
# This macro performs additional compiler tests.
#--------------------------------------------------------------------

AC_CYGWIN

if test "$ac_cv_cygwin" = "yes" ; then
    AC_MSG_ERROR([Compiling with the Cygwin version of gcc is not supported.
    Use the Mingw version of gcc from www.mingw.org instead.])
fi

#--------------------------------------------------------------------
# Determines the correct binary file extension (.o, .obj, .exe etc.)
#--------------------------------------------------------------------

AC_OBJEXT
AC_EXEEXT

#--------------------------------------------------------------------
# Call SC_TEA_INIT as the first SC_ macro to set up initial vars
#--------------------------------------------------------------------

SC_TEA_INIT

#--------------------------------------------------------------------
# Load the tclConfig.sh file
#--------------------------------------------------------------------

SC_PATH_TCLCONFIG
SC_LOAD_TCLCONFIG

#--------------------------------------------------------------------
# Use only public headers
#--------------------------------------------------------------------

SC_PUBLIC_TCL_HEADERS
#SC_PRIVATE_TCL_HEADERS

#--------------------------------------------------------------------
# A few miscellaneous platform-specific items:
#
# Define a special symbol for Windows (BUILD_exampleA in this case) so
# that we create the export library with the dll.  See sha1.h on how
# to use this.
#
# Windows creates a few extra files that need to be cleaned up.
# You can add more files to clean if your extension creates any extra
# files.
#
# Define any extra compiler flags in the PACKAGE_CFLAGS variable.
# These will be appended to the current set of compiler flags for
# your system.
#--------------------------------------------------------------------

if test "${TEA_PLATFORM}" = "windows" ; then
    AC_DEFINE_UNQUOTED(BUILD_${PACKAGE})
    CLEANFILES="*.lib *.dll *.exp *.ilk *.pdb vc*.pch"
    EXTRA_SOURCES=
else
    CLEANFILES=
    EXTRA_SOURCES=
fi
AC_SUBST(CLEANFILES)
AC_SUBST(EXTRA_SOURCES)

#--------------------------------------------------------------------
# Check whether --enable-threads or --disable-threads was given.
# Thread requires --enable-threads of course.
#--------------------------------------------------------------------

SC_ENABLE_THREADS

if test "${TCL_THREADS}" != "1"; then
AC_MSG_ERROR([
The Thread package must be configured with --enable-threads])
fi

#--------------------------------------------------------------------
# The statement below defines a collection of symbols related to
# building as a shared library instead of a static library.
#--------------------------------------------------------------------

SC_ENABLE_SHARED

#--------------------------------------------------------------------
# This macro figures out what flags to use with the compiler/linker
# when building shared/static debug/optimized objects.  This information
# can be taken from the tclConfig.sh file, but this figures it all out.
#--------------------------------------------------------------------

SC_CONFIG_CFLAGS

#--------------------------------------------------------------------
# Set the default compiler switches based on the --enable-symbols 
# option.
#--------------------------------------------------------------------

SC_ENABLE_SYMBOLS

if test "${SHARED_BUILD}" = "1" ; then
    CFLAGS='${CFLAGS_DEFAULT} ${CFLAGS_WARNING} ${SHLIB_CFLAGS}'
else
    CFLAGS='${CFLAGS_DEFAULT} ${CFLAGS_WARNING}'
fi
AC_SUBST(SHARED_BUILD)

#--------------------------------------------------------------------
# Everyone should be linking against the Tcl stub library.
#--------------------------------------------------------------------

AC_DEFINE(USE_TCL_STUBS)

#--------------------------------------------------------------------
# This macro generates a line to use when building a library.  It
# depends on values set by the SC_ENABLE_SHARED, SC_ENABLE_SYMBOLS,
# and SC_LOAD_TCLCONFIG macros above.
#--------------------------------------------------------------------

SC_MAKE_LIB

#--------------------------------------------------------------------
# Find tclsh so that we can run pkg_mkIndex to generate the pkgIndex.tcl
# file during the install process.  Don't run the TCLSH_PROG through
# ${CYGPATH} because it's being used directly by make.
# Require that we use a tclsh shell version 8.2 or later since earlier
# versions have bugs in the pkg_mkIndex routine.
#--------------------------------------------------------------------

SC_PROG_TCLSH

#--------------------------------------------------------------------
# Finally, substitute all of the various values into the Makefile.
#--------------------------------------------------------------------

AC_OUTPUT([Makefile pkgIndex.tcl])

